Basic Operations on Stack
In order to make manipulations in a stack, there are certain operations provided to us.

push() to insert an element into the stack
pop() to remove an element from the stack
top() Returns the top element of the stack.
isEmpty() returns true is stack is empty else false
size() returns the size of stack

Push: 
Adds an item to the stack. If the stack is full, then it is said to be an Overflow condition.
---------
5    [4]  -> top
---------
4 [3]  -> top
---------
3 [2]
---------
2 [1]
---------
1 [0]
---------
Size  :- 5

push(newElement)
begin
	if stack is full -> (Stack size (5) -> all 5 locations have elements, then you are trying to add an element)
		return	
	increment top
	stack[top] assign the newElement
	
Pop:
Removes an item from the stack. The items are popped in the reversed order in which they are pushed. If the stack is empty, then it is said to be an Underflow condition.
---------
 
---------
4 [3]   -> top
---------
3 [2]
---------
2 [1]
---------
1 [0]
---------
Size  :- 5
pop(){
	if(stack is empty){
		return
	}	
	int removedValue = stack[top];
	decrement top; top--
	return removedValue;
}

top(){
	return stack[top]
} 


1. Check for Balanced Brackets in an expression (well-formedness) using Stack

Input: exp = “[()]{}{[()()]()}” 
Output: Balanced
Explanation: all the brackets are well-formed

Input: exp = “[()}” , "[", "]", "(]", "()(", "[()]"
Output: Not Balanced
Explanation: all the brackets are well-formed
 
 
 


Whenever we encounter an opening bracket, then push the bracket in to the stack

Whenever we encounter an closing bracket, 
		then peek and verify is the top bracket is matching opening bracket
			-> pop -> top element in the stack
			
Input :- ( [ { } ] )

0 -> ( -> Stack -> (
1 -> [ -> Stack -> ( [
2 -> { -> Stack -> ( [ {
3 -> } -> Matching condition -> peek() -> {  
				are these matching brackets {  }
				pop -> {  -> Current Stack -> ( [		
4 -> ] -> Matching condition -> peek() -> [
				are these matching brackets [ ]
				pop -> [ -> Current Stack -> (		
5 -> ) -> Matching condition -> peek() -> (
				are these matching brackets  ( )
				pop ->( -> Current Stack 
				
Stack -> Empty =>  So brackets are balanced.

[()}

0 -> [  -> Stack -> [
1 -> (  -> Stack -> [ (
2 -> ) -> matching condition ( ), pop ( -> Stack -> [
3 -> } -> matching condition [ },  Stack -> [
				
Stack -> Not Empty =>  So brackets are not balanced.

({[ })]

{[1+(2*3)]/2}


