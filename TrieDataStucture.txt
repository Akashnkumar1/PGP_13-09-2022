Trie
	-> app
	-> apple
	-> apply
	-> by
	-> bye
	
Words	 -> [26 Alphabet Characters!]

class TrieNode{
	TrieNode[] children;
	boolean isEndOfWord;
	public TrieNode(){
		children = new TrieNode[26];
		isEndOfWord = false;
	}
}

Insert Usecases:-
1. If not present, inserts the key into trie.
2. If key is prefix of trie node, just mark it as leaf node.
void insert(String key){
		int level;
		int length = key.length();
		int index;
		
		TrieNode wordCrawler = root;		
		for(level = 0; level < length; level++){		
			index = key.charAt(level) - 'a';
			if(wordCrawler.children[index] == null){
				wordCrawler.children[index] = new TrieNode();
			} 
			wordCrawler = wordCrawler.children[index];
		}		
		wordCrawler.isEndOfWord = true;
}

void boolean search(String key){
		int level;
		int length = key.length();
		int index;
		
		TrieNode wordCrawler = root;		
		for(level = 0; level < length; level++){		
			index = key.charAt(level) - 'a';
			
			if(wordCrawler.children[index] == null){
				return false;
			} 
			wordCrawler = wordCrawler.children[index];
		}		
		return wordCrawler.isEndOfWord;
}
